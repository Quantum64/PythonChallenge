{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["URL","App","props","state","code","output","question","time","phase","test","feedback","result","username","score","totslScore","pass","submitted","named","timer","socket","WebSocket","onmessage","msg","message","console","log","data","JSON","parse","type","this","setState","starter","startTime","startTimer","totalScore","results","setInterval","countDown","seconds","clearInterval","x","undefined","skulpt","builtinFiles","pre","configure","text","read","readf","importMainWithBody","send","stringify","submission","monaco","rows","push","TableRow","key","TableCell","name","last","total","Typography","variant","Paper","Table","TableHead","TableBody","options","selectOnLineNumbers","automaticLayout","optionsArguments","minimap","enabled","optionsDisabled","readOnly","content","Grid","container","direction","justify","alignItems","style","width","height","item","component","Fragment","spacing","TextField","id","label","value","onChange","event","target","margin","Button","size","color","onClick","handleUsername","xs","language","theme","editorWillMount","editor","mutateEditor","padding","handleRunCode","handleSubmit","fontSize","getResultTable","CssBaseline","AppBar","position","Toolbar","noWrap","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d523381.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport MonacoEditor from 'react-monaco-editor';\nimport skulpt from 'skulpt';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst URL = \"q64.co:12345/socket\"\nconst automaticLayout = false;\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: \"\",\n      output: \"\",\n      question: \"No question\",\n      time: 1,\n      phase: \"\",\n      test: \"\",\n      feedback: \"\",\n      result: \"\",\n      username: \"\",\n      score: 0,\n      totslScore: 0,\n      pass: false,\n      submitted: false,\n      named: false\n    }\n\n    this.timer = 0;\n    this.socket = new WebSocket(\"ws://\" + URL);\n    this.socket.onmessage = (msg) => this.message(msg);\n    //this.socket.onclose = function () { alert(\"WebSocket connection closed\") };\n  }\n\n  message(msg) {\n    console.log(msg.data)\n    const message = JSON.parse(msg.data);\n    if (message.type === \"phase\") {\n      this.setState({ phase: message.phase });\n    } else if (message.type === \"question\") {\n      this.setState({\n        question: message.question,\n        time: message.time,\n        output: \"\",\n        code: message.starter,\n        submitted: false\n      });\n      this.startTime = message.time;\n      this.startTimer();\n    } else if (message.type === \"score\") {\n      this.setState({\n        feedback: message.feedback,\n        result: message.result,\n        test: message.test,\n        pass: message.pass,\n        score: message.score,\n        totalScore: message.totalScore,\n        phase: \"score\",\n        results: []\n      })\n    } else if (message.type === \"results\") {\n      this.setState({\n        results: message.results\n      })\n    }\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.startTime > 0) {\n      this.timer = setInterval(() => this.countDown(), 1000);\n    }\n  }\n\n  countDown() {\n    let seconds = this.state.time - 1;\n    this.setState({\n      time: seconds,\n    });\n    if (seconds == 0) {\n      clearInterval(this.timer);\n      this.setState({\n        submitted: true\n      })\n    }\n  }\n\n  readf(x) {\n    if (skulpt.builtinFiles === undefined || skulpt.builtinFiles[\"files\"][x] === undefined)\n      throw \"File not found: '\" + x + \"'\";\n    return skulpt.builtinFiles[\"files\"][x];\n  }\n\n  handleRunCode() {\n    let result = \"\"\n    skulpt.pre = \"output\"\n    skulpt.configure({\n      output: (text) => {\n        result += text\n      }, read: this.readf\n    });\n    skulpt.importMainWithBody(\"<stdin>\", false, this.state.code, true);\n    this.setState({\n      output: result\n    })\n  }\n\n  handleSubmit() {\n    this.socket.send(JSON.stringify({\n      type: \"submit\",\n      submission: this.state.code\n    }));\n    this.setState({\n      submitted: true\n    });\n\n    // TODO snackbar\n  }\n\n  handleUsername() {\n    this.socket.send(JSON.stringify({\n      type: \"username\",\n      username: this.state.username\n    }));\n    this.setState({\n      named: true\n    });\n  }\n\n  mutateEditor(monaco) {\n    /*\n    this.hack = monaco;\n    monaco.editor.defineTheme('emotion', {\n      base: 'vs',\n      inherit: true,\n      rules: [\n        { token: 'keyword', foreground: '0000ff' },\n      ]\n    });\n    monaco.languages.register({\n      id: \"elang\"\n    });\n    */\n  }\n\n  getResultTable() {\n    const rows = [];\n    for (let result of this.state.results) {\n      rows.push(\n        <TableRow key={result}>\n          <TableCell>\n            {result.name}\n          </TableCell>\n          <TableCell>\n            {result.last}\n          </TableCell>\n          <TableCell>\n            {result.total}\n          </TableCell>\n        </TableRow>);\n    }\n    return (\n      <div>\n        <Typography variant=\"h2\">\n          Problem Results\n        </Typography>\n        <Paper>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Username</TableCell>\n                <TableCell>Score</TableCell>\n                <TableCell>Total Score</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows}\n            </TableBody>\n          </Table>\n        </Paper>\n      </div>\n    );\n  }\n\n\n  render() {\n    const options = { selectOnLineNumbers: true, automaticLayout: automaticLayout };\n    const optionsArguments = { ...options, minimap: { enabled: false } }\n    const optionsDisabled = { ...optionsArguments, readOnly: true }\n    const bytes = 0\n\n    let content = <div>\n      Connecting to the socket. Please wait.\n      <br />\n      If you see this message for more than a few seconds, try refreshing the page.\n    </div>;\n\n    if (this.state.phase === \"waiting\") {\n      content =\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" style={{ width: \"100%\", height: \"100%\" }}>\n          <Grid item>\n            <Typography variant=\"h1\" component=\"h2\">\n              WAITING FOR PROBLEM\n            </Typography>\n          </Grid>\n          {this.state.named ?\n            <Grid item>\n              <Typography variant=\"h6\">\n                Greetings, {this.state.username}\n              </Typography>\n            </Grid>\n            :\n            <React.Fragment>\n              <Grid item>\n                <Typography variant=\"h6\">\n                  While you're waiting, pick a username\n            </Typography>\n              </Grid>\n              <Grid item>\n                <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\n                  <Grid item>\n                    <TextField\n                      id=\"outlined-name\"\n                      label=\"Name\"\n                      value={this.state.username}\n                      onChange={(event) => {\n                        this.setState({\n                          username: event.target.value\n                        })\n                      }}\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.handleUsername()}>\n                      Submit\n                </Button>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </React.Fragment>}\n        </Grid>\n    }\n    else if (this.state.phase === \"question\") {\n      content =\n        <React.Fragment>\n          <Typography variant=\"h5\">\n            {this.state.question}\n          </Typography>\n          <Grid container direction=\"column\" spacing={0} style={{ height: \"100%\" }}>\n            <Grid item>\n              <Typography variant=\"h6\">\n                Code\n              </Typography>\n            </Grid>\n            <Grid item xs>\n              <MonacoEditor width=\"100%\" height=\"300px\" language=\"python\" theme=\"vs\"\n                value={this.state.code}\n                options={options}\n                onChange={(value, event) => {\n                  this.setState({\n                    code: value\n                  });\n                }}\n                editorWillMount={(editor) => this.mutateEditor(editor)}\n              />\n            </Grid>\n            <br />\n            <Grid item>\n              <Grid container direction=\"row\" alignItems=\"center\" spacing={2} style={{ padding: 5 }}>\n                <Grid container direction=\"row\" alignItems=\"center\" spacing={2} style={{ padding: 5 }}>\n                  <Grid item>\n                    <Typography variant=\"h6\">\n                      Program Output\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.handleRunCode()}>\n                      Run Code\n                    </Button>\n                  </Grid>\n                  {this.state.submitted ? <span></span> :\n                    <Grid item>\n                      <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={() => {\n                        this.handleSubmit();\n                      }}>\n                        Submit Solution\n                     </Button>\n                    </Grid>\n                  }\n                  <Grid item>\n                    <Typography variant=\"h6\">\n                      Time Remaining: {this.state.time}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs>\n              <MonacoEditor width=\"100%\" height=\"250px\" language=\"text\" theme=\"vs\"\n                value={this.state.output}\n                options={optionsDisabled}\n              />\n            </Grid>\n          </Grid>\n        </React.Fragment>\n    }\n    else if (this.state.phase === \"score\") {\n      content =\n        <React.Fragment>\n          <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\n            <Grid item>\n              {this.state.pass ?\n                <Typography variant=\"h3\" style={{ color: \"green\", fontSize: \"10em\" }}>\n                  PASS\n              </Typography> :\n                <Typography variant=\"h3\" style={{ color: \"red\", fontSize: \"10em\" }}>\n                  FAIL\n                </Typography>}\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h3\" style={{ color: \"RoyalBlue\" }}>\n                Your score for this probpem is {this.state.score}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h5\" style={{ color: \"RoyalBlue\" }}>\n                This brings your total score to {this.state.totalScore}\n              </Typography>\n            </Grid>\n          </Grid>\n          <br /><br />\n          <Typography variant=\"h3\">\n            Run Details\n          </Typography>\n          <Typography variant=\"h6\">\n            Feedback: {this.state.feedback}\n          </Typography>\n          <Typography variant=\"h6\">\n            Your test case: {this.state.test}\n          </Typography>\n          <Typography variant=\"h6\">\n            Your program produced: {this.state.result}\n          </Typography>\n        </React.Fragment>\n    } else if (this.state.phase === \"results\") {\n      content = this.getResultTable()\n    }\n\n    return (\n      <div style={{ height: \"100%\" }}>\n        <CssBaseline />\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Grid container spacing={2} alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                  Python Challenge\n                </Typography>\n              </Grid>\n            </Grid>\n          </Toolbar>\n        </AppBar>\n        <Grid container justify=\"center\" style={{ padding: 20, height: \"90%\" }}>\n          <Grid item xs>\n            {content}\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'typeface-roboto';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}